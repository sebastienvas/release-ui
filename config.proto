syntax = "proto3";

package release;

service Release {
    // Get information about a release from its id
    rpc GetRelease(GetReleaseRequest) returns (Release) {};
    // List all releases matching the request
    rpc ListReleases (ListReleasesRequest) returns (ListReleasesResponse) {};
}

message GetReleaseRequest {
    // Release id
    ReleaseIdentifier release_id = 1;
}

message ListReleasesRequest {
    // URL of the repository
    string repo_url = 1;
    // State of the release
    Status state = 2;
    // Release labels
    repeated string labels = 3;
    // Look for releases created after:
    int64 from_timestamp = 4;
    // Look for releases modified before:
    int64 to_timestamp = 5;
    // List only a number of releases, list all otherwise
    uint32 max_count = 6;
}

message ListReleasesResponse {
    // Release identifiers
    repeated ReleaseIdentifier id = 1;
}

message ReleaseIdentifier {
    // URL of the repo
    string repo_url = 1;
    // Unique identifier for the release
    string id = 2;
}

enum Status {
    // Default.
    UNUSED_STATUS = 0;
    // The Release is in progress.
    PENDING = 1;
    // The Release is succesful.
    COMPLETE = 2;
    // The Release could not complete and needs manual intervention.
    SUSPENDED = 3;
    // The Release has been abandoned.
    ABANDONED = 4;
}
enum TaskStatus {
    // Default.
    UNUSED_STATUS = 0;
    // Not started
    NOT_STARTED = 1;
    // The Release is in progress.
    PENDING = 2;
    // The Release is succesful.
    COMPLETE = 3;
    // The Release could not complete and needs manual intervention.
    FAILED = 4;
}

message ReleaseTask {
    // Task id
    string id = 1;
    // Name identifying the type of task
    string name = 2;
    // Time this release task was created
    int64 started = 3;
    // Last time this release task was modified
    int64 last_modified = 4;
    // Status of the task
    TaskStatus status = 5;
    // Error message extracted form the log
    string error = 6;
    // Link to log file
    string log_url = 7;
}

message Release {
    // Release Id
    ReleaseIdentifier id = 1;
    // For base branch, use "base: master", for tag use "tag: 0.3.2"
    repeated string labels = 2;
    // Reference used to create this release
    string ref = 3;
    // State of the release
    Status state = 4;
    // Information about the last taks in progress
    string summary = 5;
    // Time this release was created
    int64 started = 6;
    // Last time this release was modified
    int64 last_modified = 7;
    // When release is complete, a link to artifacts.
    string artifacts_link = 8;
    // When release is complete, a link to the release page
    string release_url = 9;
    // Release tasks
    repeated ReleaseTask tasks = 10;
}






